// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleEcommerce.Data;

#nullable disable

namespace SimpleEcommerce.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240227001230_AppMigration")]
    partial class AppMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("CategoryProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryProduct", (string)null);
                });

            modelBuilder.Entity("SimpleEcommerce.Models.BrandModel", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("SimpleEcommerce.Models.CategoryModel", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("SimpleEcommerce.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Slug");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex(new[] { "Slug" }, "IX_Category_Slug")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("SimpleEcommerce.Models.SkuModel", b =>
                {
                    b.Property<int>("SkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR")
                        .HasColumnName("Name");

                    b.Property<float>("Price")
                        .HasMaxLength(20)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Price");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER")
                        .HasColumnName("Stock");

                    b.HasKey("SkuId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "ImageUrl" }, "IX_Sku_Image_Url")
                        .IsUnique();

                    b.ToTable("Sku", (string)null);
                });

            modelBuilder.Entity("CategoryProductModel", b =>
                {
                    b.HasOne("SimpleEcommerce.Models.CategoryModel", "Category")
                        .WithMany("CategoryProduct")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleEcommerce.Models.ProductModel", "Product")
                        .WithMany("CategoryProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SimpleEcommerce.Models.ProductModel", b =>
                {
                    b.HasOne("SimpleEcommerce.Models.BrandModel", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Brand_Product");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("SimpleEcommerce.Models.SkuModel", b =>
                {
                    b.HasOne("SimpleEcommerce.Models.ProductModel", "Product")
                        .WithMany("Skus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Sku");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SimpleEcommerce.Models.BrandModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SimpleEcommerce.Models.CategoryModel", b =>
                {
                    b.Navigation("CategoryProduct");
                });

            modelBuilder.Entity("SimpleEcommerce.Models.ProductModel", b =>
                {
                    b.Navigation("CategoryProduct");

                    b.Navigation("Skus");
                });
#pragma warning restore 612, 618
        }
    }
}
